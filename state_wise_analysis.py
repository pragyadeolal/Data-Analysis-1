# -*- coding: utf-8 -*-
"""State-wise Analysis

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKfDQXC-MBRO9FUD3PrunZk7Xn2NXFcx
"""

#Importing the Libraries/Modules
import pandas as pd 
import numpy as np 
import seaborn as sns
import matplotlib.pyplot as plt

#Importing the dataset - Statewise: Soil and Climate
from google.colab import files
data = files.upload()

df= pd.read_csv("DataSoilandClimate.csv")
df.head()

df['Max Temp °C'] = df['Max Temp °C'].astype(float)
df['Min Temp °C'] = df['Min Temp °C'].astype(float)
df['Humidity %'] = df['Humidity %'].astype(float)
df['Rainfall (mm)'] = df['Rainfall (mm)'].astype(float)
df['Average pH'] = df['Average pH'].astype(float)
df['N'] = df['N'].astype(float)
df['P'] = df['P'].astype(float)
df['K'] = df['K'].astype(float)
df['OC'] = df['OC'].astype(float)
print(df)

#checking for null values
df.isnull().sum()

#replacing null values with median
df['Max Temp °C'].fillna((df['Max Temp °C'].median()), inplace=True)
df['Min Temp °C'].fillna((df['Min Temp °C'].median()), inplace=True)
df['Humidity %'].fillna((df['Humidity %'].median()), inplace=True)
df['Rainfall (mm)'].fillna((df['Rainfall (mm)'].median()), inplace=True)
df['Average pH'].fillna((df['Average pH'].median()), inplace=True)
df['N'].fillna((df['N'].median()), inplace=True)
df['P'].fillna((df['P'].median()), inplace=True)
df['K'].fillna((df['K'].median()), inplace=True)
df['OC'].fillna((df['OC'].median()), inplace=True)
df.head()

#Aggregating the values State wise
dataset_aggregated = df.groupby("States and UTs").sum()
dataset_aggregated.head()

#Importing the dataset for Yield/Production (State wise)
from google.colab import files
data = files.upload()

production_data = pd.read_csv('Production.csv')
production_data.head()

#Changing indices
production_data.set_index("States and Uts",inplace=True)
production_data.head()

#Joining the two Datasets
dataset_aggregated.shape

production_data.shape

data = production_data.join(dataset_aggregated)
data.head()

#Correlation Matrix
data.corr()

dataplot = sns.heatmap(data.corr())

#Visualization of the results
data.head()

#Plotting Max Temp Vs Production
x = data["Max Temp °C"]
y = data["Production"]
sns.scatterplot(x, np.log(y)) #logscaling

sns.regplot(x,np.log(y))

#Plotting Min Temp Vs Production
x = data["Min Temp °C"]
y = data["Production"]
sns.scatterplot(x, np.log(y))

sns.regplot(x,np.log(y))

#Plotting Humidity Vs Production
x = data["Humidity %"]
y = data["Production"]
sns.scatterplot(x, np.log(y))

sns.regplot(x,np.log(y))

#Plotting Rainfall Vs Production
x = data["Rainfall (mm)"]
y = data["Production"]
sns.scatterplot(x, np.log(y))

sns.regplot(x,np.log(y))

#Plotting Average pH Vs Production
x = data["Average pH"]
y = data["Production"]
sns.scatterplot(x, np.log(y))

sns.regplot(x,np.log(y))

#Plotting Nitrogen Vs Production
x = data["N"]
y = data["Production"]
sns.scatterplot(x, np.log(y))

sns.regplot(x,np.log(y))

#Plotting Phosphorus Vs Production
x = data["P"]
y = data["Production"]
sns.scatterplot(x, np.log(y))

sns.regplot(x,np.log(y))

#Plotting Potassium Vs Production
x = data["K"]
y = data["Production"]
sns.scatterplot(x, np.log(y))

sns.regplot(x,np.log(y))

#Plotting Organic Carbon Vs Production
x = data["OC"]
y = data["Production"]
sns.scatterplot(x, np.log(y))

sns.regplot(x,np.log(y))